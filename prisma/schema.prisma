// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  forAdoption   Boolean?       @default(false)
  lost          Boolean?       @default(false)
  Account       Account[]
  follows       User[]         @relation("follows")
  followedBy    User[]         @relation("follows")
  posts         Post[]
  Comments      Comment[]
  Replies       Reply[]
  Message       Message[]
  Conversations Conversation[]
  Notifications Notification[]
}

model Post {
  id        String    @id @default(uuid())
  text      String?
  photo     String?
  createdAt DateTime  @default(now())
  likes     String[]
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Comments  Comment[]
}

model Comment {
  id       String   @id @default(uuid())
  text     String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  Replies  Reply[]
  likes    String[]
}

model Reply {
  id        String   @id @default(uuid())
  text      String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     String[]
}

model Conversation {
  id        String    @id @default(uuid())
  updatedAt DateTime  @default(now())
  seenBy    String[]
  messages  Message[]
  users     User[]
}

model Message {
  id             String        @id @default(uuid())
  body           String?
  image          String?
  seenBy         String[]
  createdAt      DateTime      @default(now())
  author         User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  link      String
  type      String
  createdAt DateTime @default(now())
  seen      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
